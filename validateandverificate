üß© Validaci√≥n y Verificaci√≥n del Proyecto SafeTransit
üéØ Objetivo General

Garantizar que la aplicaci√≥n SafeTransit cumpla con los requerimientos funcionales y no funcionales, asegurando la confiabilidad, usabilidad y precisi√≥n del sistema antes, durante y despu√©s de su desarrollo.

‚úÖ 1. Validaci√≥n

se enfoca en comprobar que el sistema cumple con las necesidades reales del usuario final y que la soluci√≥n propuesta resuelve efectivamente el problema identificado.

1.1 M√©todos de Validaci√≥n
M√©todo	Descripci√≥n	Responsable
Entrevistas a usuarios	Reuniones con ciudadanos y conductores para validar si las funciones (mapa, alertas, denuncias) satisfacen sus necesidades de informaci√≥n y seguridad.	Equipo de an√°lisis
Encuestas digitales	Formularios en l√≠nea para conocer la percepci√≥n sobre los problemas de transporte (incertidumbre, retrasos, inseguridad).	Investigador principal
Prototipado temprano (mockups)	Presentaci√≥n de interfaces simuladas de la app a usuarios para obtener retroalimentaci√≥n sobre usabilidad y dise√±o.	Equipo UX/UI
Revisi√≥n de requerimientos	Validaci√≥n conjunta entre desarrolladores, usuarios y autoridades para confirmar que los requerimientos son completos y coherentes.	L√≠der t√©cnico
1.2 Resultados Esperados

Los usuarios confirman que la app resuelve un problema real.

Se identifican posibles mejoras antes del desarrollo (alertas m√°s espec√≠ficas, dise√±o de mapas, tipos de incidentes, etc.).

Los requerimientos funcionales quedan aprobados y validados antes de programar.

üß™ 2. Verificaci√≥n

2.1 M√©todos de Verificaci√≥n
M√©todo	Descripci√≥n	Etapa
Pruebas unitarias	Verificar que cada m√≥dulo (registro, denuncias, mapa, alertas) funcione correctamente por separado.	Desarrollo
Pruebas de integraci√≥n	Confirmar que los m√≥dulos se comuniquen adecuadamente entre frontend, backend y base de datos.	Desarrollo
Pruebas funcionales	Verificar que las funciones coincidan con los casos de uso definidos.	Testing
Pruebas de usabilidad	Evaluar facilidad de uso, claridad de interfaz y tiempo de respuesta del usuario.	Validaci√≥n final
Pruebas de rendimiento	Medir velocidad de carga, tiempo de respuesta de alertas en tiempo real y estabilidad bajo carga.	Etapa final
üì± 3. Casos de Uso para Validaci√≥n y Verificaci√≥n

A continuaci√≥n, se describen los casos de uso clave que deben verificarse antes del desarrollo y durante las pruebas del sistema:

#	Caso de Uso	Validaci√≥n Previa	Verificaci√≥n Durante el Desarrollo
1	Registro de denuncias	Se consulta si los usuarios realmente desean incluir foto/video y c√≥mo prefieren describir los hechos.	Validar que el formulario no permita enviar datos vac√≠os y que los archivos se guarden correctamente.
2	Consulta de denuncias propias	Verificar si los ciudadanos desean filtros por fecha o estado.	Comprobar que solo se muestren denuncias del usuario autenticado.
3	Mapa de incidentes	Confirmar que los usuarios prefieren visualizar zonas peligrosas en mapas interactivos.	Asegurar que los marcadores y filtros funcionen y se actualicen en tiempo real.
4	Notificaciones de zonas de riesgo	Validar si los usuarios quieren alertas por correo o dentro de la app.	Probar que las notificaciones lleguen correctamente seg√∫n las zonas configuradas.
5	Panel de administraci√≥n	Confirmar con autoridades qu√© datos desean ver (tipos de incidentes, estados, zonas).	Verificar roles de usuario, permisos y actualizaci√≥n de estado en tiempo real.
6	Recuperaci√≥n de contrase√±a	Revisar si los usuarios prefieren correo o SMS como m√©todo de recuperaci√≥n.	Verificar env√≠o correcto del enlace y validaci√≥n de seguridad.
7	Calificaci√≥n de zonas seguras/inseguras	Evaluar si los usuarios comprenden la escala de calificaci√≥n (üëç / üëé).	Confirmar que el sistema registre solo una calificaci√≥n por usuario y actualice el promedio.
üß© 4. Validaci√≥n de Requerimientos No Funcionales
Requerimiento	Tipo	M√©todo de Validaci√≥n	Criterio de Aceptaci√≥n
Seguridad	No funcional	Pruebas de autenticaci√≥n, cifrado de datos.	Los datos del usuario deben viajar cifrados y almacenarse de forma segura.
Disponibilidad	No funcional	Simulaciones de carga y tiempo de respuesta.	El sistema debe soportar al menos 100 conexiones simult√°neas sin fallos.
Usabilidad	No funcional	Pruebas A/B con usuarios reales.	El 90% de los usuarios debe poder completar tareas sin ayuda externa.
Escalabilidad	No funcional	Pruebas en ambientes simulados de alta demanda.	El sistema debe permitir agregar m√°s buses o zonas sin afectar rendimiento.
üìã 5. Estrategia de Pruebas Futuras

Testing automatizado con herramientas como Jest (JavaScript) o PyTest (Python).

Pruebas de API con Postman o Swagger.

Pruebas de mapas y geolocalizaci√≥n simulando ubicaciones falsas para validar alertas.

Testing de UI con Cypress o Selenium.

Pruebas piloto en una ciudad espec√≠fica antes del despliegue nacional.

üîç Conclusi√≥n

La validaci√≥n y verificaci√≥n permitir√°n asegurar la calidad, utilidad y confiabilidad de la aplicaci√≥n SafeTransit antes de su construcci√≥n definitiva.
De esta forma, se garantiza que el desarrollo se base en requerimientos bien definidos, evitando reprocesos y asegurando que la aplicaci√≥n aporte valor real a la comunidad.
